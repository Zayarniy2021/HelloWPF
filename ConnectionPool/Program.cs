using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.SqlClient;
using System.Data.OleDb;

namespace ConnectionPool
{
    class Program
    {
        static void Main(string[] args)
        {
            string connectionString =
    @"Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=|DataDirectory|SampleDatabase.mdf;Integrated Security=True";
            // ...
            // Получить соединение из пула (если он существует) или 
            // создать пул с 10 соединениями (если нет)
            SqlConnection connection = new SqlConnection(connectionString);
            connection.Open();
            Console.WriteLine("Версия сервера:" + connection.ServerVersion);
            Console.WriteLine("Состояние соединения:" + connection.State.ToString());
            Console.WriteLine("Имя машины:"+connection.WorkstationId);
            // Вернуть соединение в пул
            connection.Close();
            Console.ReadKey();
        }
    }
}
/*
Соединение с сервером базы данных обычно состоит из нескольких длительных шагов. Необходимо установить физический канал, например сокет или именованный канал, выполнить первоначальное подтверждение установления связи с сервером, выполнить синтаксический анализ данных строки соединения, сервер должен проверить подлинность соединения, а также запустить проверку прикреплений в текущей транзакции и т. д.
На практике большинство приложений использует только одно или несколько различных конфигураций соединений. Это означает, что во время выполнения приложения многие идентичные соединения будут повторно открываться и закрываться. Чтобы свести к минимуму затраты на открытие соединений, ADO.NET использует метод оптимизации, называемый объединением соединения.
Пул соединений снижает количество открытий новых соединений. Пулер сохраняет право собственности на физическое соединение. Он управляет соединениями с помощью поддержания набора активных соединений для каждой конфигурации данного соединения. Каждый раз, когда пользователь вызывает метод Open в соединении, организатор пулов ищет в пуле доступное соединение. Если соединение пула доступно, вместо открытия нового соединения он возвращает его участнику. При вызове приложением метода Close в соединении вместо закрытия организатор пулов возвращает его в набор активных соединений пула. После возвращения соединения в пул оно готово к повторному использованию при следующем вызове метода Open.
*/
